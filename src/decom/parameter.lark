?start: parameter

?iterator: up_iterator | dn_iterator
up_iterator: "++" int ("<" int)?
dn_iterator: "--" int ("<" int)?

parameter: "[" all_fragments "]"
    | "[" all_fragments "]" bit_ops                  -> parameter_with_mask
    | "[" "(" all_fragments ")" iterator "]" bit_ops -> generator_parameter_with_mask
    | "[" "(" all_fragments ")" iterator "]"         -> generator_parameter
    | "[" all_fragments "]" bit_ops iterator         -> supercom_parameter_with_mask
    | "[" all_fragments "]" iterator                 -> supercom_parameter

!bit_ops: and_or_xor "x" hex
    | and_or_xor "o" oct
    | and_or_xor "b" bin

?and_or_xor: "AND" | "OR" | "XOR"

all_fragments: mod_fragments ("+" mod_fragments)* -> concatenate
?mod_fragments: fragments
    | "~" fragments "R"     -> complement_reverse
    | "~" fragments         -> complement
    | fragments "R"         -> reverse

fragments: int -> frag_word_no_bits
    | int "-" int ":" bit_spec -> frag_range_bits_last
    | int ":" bit_spec "-" int -> frag_range_bits_first
    | int ":" bit_spec         -> frag_word_with_bits
    | int "-" int              -> frag_range_no_bits
    | ("x" HEX | "o" OCT | "b" BIN)         -> frag_constant
    | "'" ("x" HEX | "o" OCT | "b" BIN) "'" -> frag_constant

?bit_spec: bit_list
    | bit_mask
bit_list:  bit_range ("," bit_range)* -> concatenate
bit_range: int "-" int
    | int

bit_mask: "x" hex
    | "o" oct
    | "b" bin

hex: HEX -> hex2dec
oct: OCT -> oct2dec
bin: BIN -> bin2dec
int: INT -> integer

HEX: /[0-9a-fA-F]+/
OCT: /[0-7]+/
BIN: /[01]+/

%import common (INT, WS)
%ignore WS

// [1:5-8] == [1:8-5] == [1:5,6,7,8] == [1:8,7,6,5]
// [1:1,3,5,7] == [1:7,5,3,1] == [1:7+1:5+1:3+1:1] != [1:1+1:3+1:5+1:7]
// [1:4-1-4] == [1-4:1-4] == [1:1-4+2:1-4+3:1-4+4:1-4]

// [1:8,5-3,1-4] -> parser ambiguity
// [1-4:8,5-3,1] -> parsed correctly
// ^^^^^^^^^^^^^ == [1:b10011101-4] == [1-4:b10011101] 

// [1] == [1:1-8] == [1:8-1] == [1:1,2,3,4,5,6,7,8] == [1:8,7,6,5,4,3,2,1] == [1:b11111111] == [1:o377] == [1:xff] == [1:xFF]

// [1-4:xf0] == [1:xf0-4]
